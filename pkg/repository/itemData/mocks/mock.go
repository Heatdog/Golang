// Code generated by MockGen. DO NOT EDIT.
// Source: itemData.go

// Package mock_itemdata is a generated GoMock package.
package mock_itemdata

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	itemdata "gitlab.com/vk-go/lectures-2022-2/pkg/repository/itemData"
)

// MockItemData is a mock of ItemData interface.
type MockItemData struct {
	ctrl     *gomock.Controller
	recorder *MockItemDataMockRecorder
}

// MockItemDataMockRecorder is the mock recorder for MockItemData.
type MockItemDataMockRecorder struct {
	mock *MockItemData
}

// NewMockItemData creates a new mock instance.
func NewMockItemData(ctrl *gomock.Controller) *MockItemData {
	mock := &MockItemData{ctrl: ctrl}
	mock.recorder = &MockItemDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemData) EXPECT() *MockItemDataMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockItemData) CreatePost(post itemdata.Post) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockItemDataMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockItemData)(nil).CreatePost), post)
}

// DeletePost mocks base method.
func (m *MockItemData) DeletePost(postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockItemDataMockRecorder) DeletePost(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockItemData)(nil).DeletePost), postID)
}

// GetCategory mocks base method.
func (m *MockItemData) GetCategory(category string) ([]itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", category)
	ret0, _ := ret[0].([]itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockItemDataMockRecorder) GetCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockItemData)(nil).GetCategory), category)
}

// GetName mocks base method.
func (m *MockItemData) GetName(login string) ([]itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", login)
	ret0, _ := ret[0].([]itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockItemDataMockRecorder) GetName(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockItemData)(nil).GetName), login)
}

// GetPostID mocks base method.
func (m *MockItemData) GetPostID(id string) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostID", id)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostID indicates an expected call of GetPostID.
func (mr *MockItemDataMockRecorder) GetPostID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostID", reflect.TypeOf((*MockItemData)(nil).GetPostID), id)
}

// GetPosts mocks base method.
func (m *MockItemData) GetPosts() ([]itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts")
	ret0, _ := ret[0].([]itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockItemDataMockRecorder) GetPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockItemData)(nil).GetPosts))
}

// SetPost mocks base method.
func (m *MockItemData) SetPost(post itemdata.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPost indicates an expected call of SetPost.
func (mr *MockItemDataMockRecorder) SetPost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPost", reflect.TypeOf((*MockItemData)(nil).SetPost), post)
}
