// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	itemdata "gitlab.com/vk-go/lectures-2022-2/pkg/repository/itemData"
	userdata "gitlab.com/vk-go/lectures-2022-2/pkg/repository/userData"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user userdata.User) (userdata.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(userdata.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(login, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", login, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), login, password)
}

// GetHash mocks base method.
func (m *MockAuthorization) GetHash(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockAuthorizationMockRecorder) GetHash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockAuthorization)(nil).GetHash), password)
}

// MockPosts is a mock of Posts interface.
type MockPosts struct {
	ctrl     *gomock.Controller
	recorder *MockPostsMockRecorder
}

// MockPostsMockRecorder is the mock recorder for MockPosts.
type MockPostsMockRecorder struct {
	mock *MockPosts
}

// NewMockPosts creates a new mock instance.
func NewMockPosts(ctrl *gomock.Controller) *MockPosts {
	mock := &MockPosts{ctrl: ctrl}
	mock.recorder = &MockPostsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPosts) EXPECT() *MockPostsMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPosts) CreatePost(post itemdata.CreatePost, userID string) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post, userID)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostsMockRecorder) CreatePost(post, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPosts)(nil).CreatePost), post, userID)
}

// DeletePost mocks base method.
func (m *MockPosts) DeletePost(id, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostsMockRecorder) DeletePost(id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPosts)(nil).DeletePost), id, userID)
}

// GetCategory mocks base method.
func (m *MockPosts) GetCategory(category string) ([]itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", category)
	ret0, _ := ret[0].([]itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockPostsMockRecorder) GetCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockPosts)(nil).GetCategory), category)
}

// GetName mocks base method.
func (m *MockPosts) GetName(login string) ([]itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", login)
	ret0, _ := ret[0].([]itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetName indicates an expected call of GetName.
func (mr *MockPostsMockRecorder) GetName(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockPosts)(nil).GetName), login)
}

// GetPostID mocks base method.
func (m *MockPosts) GetPostID(id string) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostID", id)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostID indicates an expected call of GetPostID.
func (mr *MockPostsMockRecorder) GetPostID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostID", reflect.TypeOf((*MockPosts)(nil).GetPostID), id)
}

// GetPosts mocks base method.
func (m *MockPosts) GetPosts() ([]itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts")
	ret0, _ := ret[0].([]itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostsMockRecorder) GetPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPosts)(nil).GetPosts))
}

// MockComments is a mock of Comments interface.
type MockComments struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsMockRecorder
}

// MockCommentsMockRecorder is the mock recorder for MockComments.
type MockCommentsMockRecorder struct {
	mock *MockComments
}

// NewMockComments creates a new mock instance.
func NewMockComments(ctrl *gomock.Controller) *MockComments {
	mock := &MockComments{ctrl: ctrl}
	mock.recorder = &MockCommentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComments) EXPECT() *MockCommentsMockRecorder {
	return m.recorder
}

// CreateComm mocks base method.
func (m *MockComments) CreateComm(postID, userID, comment string) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComm", postID, userID, comment)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComm indicates an expected call of CreateComm.
func (mr *MockCommentsMockRecorder) CreateComm(postID, userID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComm", reflect.TypeOf((*MockComments)(nil).CreateComm), postID, userID, comment)
}

// DeleteComm mocks base method.
func (m *MockComments) DeleteComm(postID, userID, commID string) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComm", postID, userID, commID)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComm indicates an expected call of DeleteComm.
func (mr *MockCommentsMockRecorder) DeleteComm(postID, userID, commID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComm", reflect.TypeOf((*MockComments)(nil).DeleteComm), postID, userID, commID)
}

// Downvote mocks base method.
func (m *MockComments) Downvote(postID, userID string) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Downvote", postID, userID)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Downvote indicates an expected call of Downvote.
func (mr *MockCommentsMockRecorder) Downvote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downvote", reflect.TypeOf((*MockComments)(nil).Downvote), postID, userID)
}

// Unvote mocks base method.
func (m *MockComments) Unvote(postID, userID string) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unvote", postID, userID)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unvote indicates an expected call of Unvote.
func (mr *MockCommentsMockRecorder) Unvote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unvote", reflect.TypeOf((*MockComments)(nil).Unvote), postID, userID)
}

// Upvote mocks base method.
func (m *MockComments) Upvote(postID, userID string) (itemdata.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upvote", postID, userID)
	ret0, _ := ret[0].(itemdata.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upvote indicates an expected call of Upvote.
func (mr *MockCommentsMockRecorder) Upvote(postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upvote", reflect.TypeOf((*MockComments)(nil).Upvote), postID, userID)
}
